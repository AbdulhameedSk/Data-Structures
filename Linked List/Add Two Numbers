I SEEN THE SOLUTION :(
https://www.youtube.com/watch?v=LBVsXSMOIk4

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
//create new ListNode point it to head
        var head = new ListNode();
//point temp to head
        var temp=head;
        int sum=0;
        int carry=0;
        while(l1!=null || l2!=null || carry!=0){
//restore sum with 0
            sum=0;
//trace ListNode till null
            if(l1!=null){
                sum=sum+l1.val;
                l1=l1.next;
            }
            if(l2!=null){
                sum=sum+l2.val;
                l2=l2.next;
            }
//Add carry to sum
            sum+=carry;
//calculate carry
            carry=sum/10;
//Add new node to last with is sum
            var node=new ListNode(sum%10);
            temp.next=node;
            temp=temp.next;

        }
        return head.next;
    }
}


MY TRY
/*
 import java.util.*;
 import java.lang.*;
class Solution {
    public static int get(int index) {
            var head=new ListNode();
            int counter = 0;
            while (counter != index) {
            counter++;
            head = head.next;
    }
    int s=head.val;
    return s;
}
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
       ListNode ans = new ListNode();
        for(int i=0;i<Math.max(l1.size(),l2.size());i++){
            int result1 = (i < l1.size()) ? l1.get(i) : 0;
            int result2 = (i < l2.size()) ? l2.get(i) : 0;
            ans.add(result1+result2);
        }
        return ans.reverse();
}
}
*/
